<?php

declare(strict_types=1);

namespace Ipotseluev\FastOrder\Command;

use Ipotseluev\FastOrder\Command\Helper\OptionCompletion;
use Ipotseluev\FastOrder\Command\Helper\OptionCompletionFabric;
use Shopware\Core\Framework\Context;
use Shopware\Core\Framework\DataAbstractionLayer\EntityRepository;
use Shopware\Core\Framework\DataAbstractionLayer\Search\Criteria;
use Shopware\Core\Framework\DataAbstractionLayer\Search\Filter\EqualsFilter;
use Shopware\Core\Framework\Uuid\Uuid;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Completion\CompletionInput;
use Symfony\Component\Console\Completion\CompletionSuggestions;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class FastOrderCreateCommand extends Command
{
    private EntityRepository $fastOrderRepository;
    private OptionCompletionFabric $optionCompletionFabric;

    private $inputOptions = [];
    private EntityRepository $productRepository;

    public function __construct(
        EntityRepository $fastOrderRepository,
        OptionCompletionFabric $optionCompletionFabric,
        EntityRepository $productRepository,

        ?string $name = null
    ) {
        $this->optionCompletionFabric = $optionCompletionFabric;
        $this->productRepository = $productRepository;
        parent::__construct($name);
        $this->fastOrderRepository = $fastOrderRepository;
        $this->_initHelpText();
    }

    public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void
    {
        parent::complete($input, $suggestions); // TODO: Change the autogenerated stub
    }

    // Provides a description, printed out in bin/console
    protected function configure(): void
    {
        $this->setName('ipotseluev:fast-order:create');
        $this->setDescription('Does something very special.');

        foreach ($this->_getInputOptions() as $name => $option) {
            /* @var OptionCompletion $option */
            $this->addOption(
                $name,
                null,
                $option->getMode(),
                $option->getDescription(),
                null,
                $option->getOptionFunction()
            );
        }
    }

    // Actual code executed in the command
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $dataToSave = $this->_getReadyToSaveData($input);

        if (!$dataToSave) {
            $output->writeln('No data to save');
        }
        $this->fastOrderRepository->create([$dataToSave], Context::createDefaultContext());

        $output->writeln('Fast Order with ID '.$dataToSave['id'].' has been created');

        return Command::SUCCESS;
    }

    private function _getReadyToSaveData(InputInterface $input)
    {
        $dataToSave = ['id' => Uuid::randomHex()];
        $entityAttributes = array_keys($this->_getInputOptions());

        $criteria = new Criteria();
        $criteria->addFilter(new EqualsFilter('productNumber', $input->getOption('product_number')));
        $productResult = $this->productRepository->search($criteria, Context::createDefaultContext())->first();

        foreach ($entityAttributes as $entityAttribute) {
            $dataToSave[$entityAttribute] = $input->getOption($entityAttribute);
        }
        $dataToSave['productId'] = $productResult->get('id');
        $dataToSave['customerMessage'] = $dataToSave['customer_message'];

        array_filter($dataToSave);

        return $dataToSave;
    }

    private function _getInputOptions()
    {
        if ($this->inputOptions) {
            return $this->inputOptions;
        }
        $this->inputOptions = [
            'customer_name' => $this->optionCompletionFabric->createOptionValueCompletion('customer_name',
                InputOption::VALUE_REQUIRED),
            'customer_phone' => $this->optionCompletionFabric->createOptionValueCompletion('customer_phone',
                InputOption::VALUE_REQUIRED),
            'customer_email' => $this->optionCompletionFabric->createOptionValueCompletion('customer_email',
                InputOption::VALUE_REQUIRED),
            'customer_message' => $this->optionCompletionFabric->createOptionValueCompletion('customer_message',
                InputOption::VALUE_OPTIONAL),
            'customer_id' => $this->optionCompletionFabric->createOptionValueCompletion('customer_id',
                InputOption::VALUE_OPTIONAL),
            // Just for suggesting
            'product_number' => $this->optionCompletionFabric->createOptionValueCompletion('product_number',
                InputOption::VALUE_REQUIRED),
        ];

        return $this->inputOptions;
    }

    private function _initHelpText()
    {
        $attributes = $this->_getInputOptions();
        $helpText = 'To Create Fast Order By CLI you need to use next options: '.PHP_EOL;
        foreach ($attributes as $attributeKey => $optionObject) {
            $isRequired = InputOption::VALUE_REQUIRED == $optionObject->getMode();
            $helpText .= ' --'.$attributeKey.' <'.$attributeKey.'>';
            $helpText .= $isRequired ? ' IS REQUIRED' : '';
            $helpText .= PHP_EOL;
        }

        $helpText .= 'Example: bin/console ipotseluev:fast-order:create --product_number SWDEMO10007.2 --customer_name "Ilia Potseluev" --customer_phone "+7999" --customer_email "poceluevilya@gmail.com"' . PHP_EOL;
        $helpText.= 'Also you can use autosuggesting on --product number SWDEMO1000 + TAB';
        $this->setHelp($helpText);
    }
}
